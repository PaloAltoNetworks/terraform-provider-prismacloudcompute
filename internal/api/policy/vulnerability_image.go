package policy

import (
	"fmt"
	"net/http"

	"github.com/PaloAltoNetworks/terraform-provider-prismacloudcompute/internal/api"
	"github.com/PaloAltoNetworks/terraform-provider-prismacloudcompute/internal/api/collection"
)

const (
	VulnerabilityImagesEndpoint   = "api/v1/policies/vulnerability/images"
	VulnerabilityCiImagesEndpoint = "api/v1/policies/vulnerability/ci/images"
)

type VulnerabilityImagePolicy struct {
	Rules []VulnerabilityImageRule `json:"rules,omitempty"`
	Type  string                   `json:"policyType,omitempty"`
}

type VulnerabilityImageRule struct {
	AlertThreshold  VulnerabilityImageThreshold       `json:"alertThreshold,omitempty"`
	BlockMessage    string                            `json:"blockMsg,omitempty"`
	BlockThreshold  VulnerabilityImageThreshold       `json:"blockThreshold,omitempty"`
	Collections     []collection.Collection           `json:"collections,omitempty"`
	CveRules        []VulnerabilityImageCveRule       `json:"cveRules,omitempty"`
	Disabled        bool                              `json:"disabled"`
	Effect          string                            `json:"effect,omitempty"`
	GraceDays       int                               `json:"graceDays,omitempty"`
	GraceDaysPolicy VulnerabilityImageGraceDaysPolicy `json:"graceDaysPolicy,omitempty"`
	Name            string                            `json:"name,omitempty"`
	Notes           string                            `json:"notes,omitempty"`
	OnlyFixed       bool                              `json:"onlyFixed"`
	TagRules        []VulnerabilityImageTagRule       `json:"tags,omitempty"`
	Verbose         bool                              `json:"verbose"`
}

type VulnerabilityImageCveRule struct {
	Description string                       `json:"description,omitempty"`
	Effect      string                       `json:"effect,omitempty"`
	Expiration  VulnerabilityImageExpiration `json:"expiration,omitempty"`
	Id          string                       `json:"id,omitempty"`
}

type VulnerabilityImageExpiration struct {
	Date    string `json:"date,omitempty"`
	Enabled bool   `json:"enabled"`
}

type VulnerabilityImageTagRule struct {
	Description string                       `json:"description,omitempty"`
	Effect      string                       `json:"effect,omitempty"`
	Expiration  VulnerabilityImageExpiration `json:"expiration,omitempty"`
	Name        string                       `json:"name,omitempty"`
}

type VulnerabilityImageThreshold struct {
	Disabled bool `json:"disabled"`
	Enabled  bool `json:"enabled"`
	Value    int  `json:"value,omitempty"`
}

type VulnerabilityImageGraceDaysPolicy struct {
	Enabled  bool `json:"enabled,omitempty"`
	Low      int  `json:"low,omitempty"`
	Medium   int  `json:"medium,omitempty"`
	High     int  `json:"high,omitempty"`
	Critical int  `json:"critical,omitempty"`
}

// Get the current CI image vulnerability policy.
func GetVulnerabilityCiImage(c api.Client) (VulnerabilityImagePolicy, error) {
	var ans VulnerabilityImagePolicy
	if err := c.Request(http.MethodGet, VulnerabilityCiImagesEndpoint, nil, nil, &ans); err != nil {
		return ans, fmt.Errorf("error getting CI image vulnerability policy: %s", err)
	}
	return ans, nil
}

// Get the current image vulnerability policy.
func GetVulnerabilityImage(c api.Client) (VulnerabilityImagePolicy, error) {
	var ans VulnerabilityImagePolicy
	if err := c.Request(http.MethodGet, VulnerabilityImagesEndpoint, nil, nil, &ans); err != nil {
		return ans, fmt.Errorf("error getting image vulnerability policy: %s", err)
	}
	return ans, nil
}

// Update the current CI image vulnerability policy.
func UpdateVulnerabilityCiImage(c api.Client, policy VulnerabilityImagePolicy) error {
	return c.Request(http.MethodPut, VulnerabilityCiImagesEndpoint, nil, policy, nil)
}

// Update the current image vulnerability policy.
func UpdateVulnerabilityImage(c api.Client, policy VulnerabilityImagePolicy) error {
	return c.Request(http.MethodPut, VulnerabilityImagesEndpoint, nil, policy, nil)
}
